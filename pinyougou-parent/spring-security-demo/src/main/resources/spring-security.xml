<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">

    <!--设置不拦截页面-->
    <security:http pattern="/login.html" security="none"></security:http>
    <security:http pattern="/error.html" security="none"></security:http>
    <!--页面拦截 是否启动SPEL表达式 hasRole('ROLE_USER')-->
    <security:http use-expressions="false">
        <!--intercept-url 拦截路径  access当前角色-->
        <security:intercept-url pattern="/**" access="ROLE_USER"></security:intercept-url>

        <!--开启表单登录-->
        <security:form-login login-page="/login.html" default-target-url="/index.html"  authentication-failure-url="/error.html"></security:form-login>
        <!--关闭跨域请求-->
        <security:csrf disabled="true"></security:csrf>
    </security:http>
    <!--认证管理器-->
    <security:authentication-manager>
        <!--认证提供者-->
        <security:authentication-provider>
            <security:user-service>
                <security:user name="admin" password="admin" authorities="ROLE_USER"></security:user>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
<!--关闭跨域请求-->
    <!--<security:csrf disabled="true"/>-->

    <!-- 配置不拦截的资源
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    	配置具体的规则
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式（没学习过）
    开启控制权限，基于表达式操作
    <security:global-method-security pre-post-annotations="enabled" secured-annotations="enabled"/>
    <security:http auto-config="true" use-expressions="false">
    <security:http auto-config="true" use-expressions="true">
         配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色"
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
        <security:intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN"/>



         定义跳转的具体的页面
        <security:form-login
                login-page="/login.jsp"
                login-processing-url="/login.do"
                default-target-url="/index.jsp"
                authentication-failure-url="/failer.jsp"
                authentication-success-forward-url="/pages/main.jsp"
        />

         关闭跨域请求
        <security:csrf disabled="true"/>
         退出
        <security:logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/login.jsp" />

    </security:http>

     切换成数据库中的用户名和密码
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
             配置加密的方式
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

     配置加密类
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

     提供了入门的方式，在内存中存入用户名和密码
    <security:authentication-manager>
    	<security:authentication-provider>
    		<security:user-service>
    			<security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/>
    		</security:user-service>
    	</security:authentication-provider>
    </security:authentication-manager>
-->
</beans>












